# -*- coding: utf-8 -*-
"""Biotech Stock Analysis & Forecast: Pancreatic Cancer Therapeutics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vtZ_CpXBLnK0LzSTD7JTBgXU7F1HeRmp

**Background**

We are first evaluating the closing price variation trends of the following companies over the last 12 months: ciSparc Ltd. (SPRC),  Oncolytics Biotech Inc. (ONCY),  XBiotech Inc. (XBIT),  Novocure Ltd. (NVCR), and Purple Biotech Ltd. (PPBT). All of these companies are invovlved in therapeutics for pancreatic cancer.
"""

!pip install yfinance

import yfinance as yf
import matplotlib.pyplot as plt
import pandas as pd

tickers = ["SPRC", "ONCY", "XBIT", "NVCR", "PPBT"]

data = yf.download(tickers, period="1y", interval="1d")

close_prices = data['Close']

plt.figure(figsize=(12, 6))
for ticker in tickers:
    plt.plot(close_prices.index, close_prices[ticker], label=ticker)

plt.title("12-Month Closing Price Variation Trends")
plt.xlabel("Date")
plt.ylabel("Price (USD)")
plt.legend()
plt.grid(True)
plt.show()

"""Now, we will compare these stocks to the NASDAQ Biotechnology Index (NBI) to see which one has the most similar variance."""

index_ticker = ["^NBI"]

all_tickers = tickers + index_ticker

data = yf.download(all_tickers, period="1y", interval="1d")

close_prices = data["Close"]

daily_returns = close_prices.pct_change().dropna()
variances = daily_returns.var()
nbi_variance = variances["^NBI"]

# comparative dataFrame for variance
comparison_df = pd.DataFrame({
    "Variance": variances.drop("^NBI"),
    "DifferenceFromNBI": abs(variances.drop("^NBI") - nbi_variance)
}).sort_values("DifferenceFromNBI")

print("Variance of Daily Returns (last 12 months):")
print(comparison_df)

print("\nNASDAQ Biotechnology Index (^NBI) daily returns variance:", nbi_variance)

most_similar_ticker = comparison_df.index[0]
print(f"\nThe ticker with the most similar variance to ^NBI is: {most_similar_ticker}")

plt.figure(figsize=(10, 5))
comparison_df["Variance"].plot(
    kind="bar",
    color="skyblue",
    edgecolor="black"
)
plt.axhline(y=nbi_variance, color='red', linestyle='--', label='NBI Variance')
plt.title("Comparison of Daily Returns Variance vs. NBI")
plt.xlabel("Ticker")
plt.ylabel("Variance of Daily Returns")
plt.legend()
plt.tight_layout()
plt.show()

"""Now, we will build an index of the 5 original stocks and compare that index to the performance of the Nasdaq Biotechnology Index (NBI)."""

mini_index = pd.DataFrame()

close_prices = close_prices.dropna()
normalized_stocks = close_prices[tickers].div(close_prices[tickers].iloc[0])
mini_index["CustomIndex"] = normalized_stocks.mean(axis=1) * 100

nbi_data = close_prices[index_ticker].dropna()
nbi_normalized = (nbi_data / nbi_data.iloc[0]) * 100
mini_index["NBI"] = nbi_normalized

plt.figure(figsize=(10, 6))
plt.plot(mini_index["CustomIndex"], label="5-Stock Index", linewidth=2)
plt.plot(mini_index["NBI"], label="Nasdaq Biotechnology Index (NBI)", linewidth=2, linestyle="--")

plt.title("Performance: Custom 5-Stock Index vs. NBI (12 Months)")
plt.xlabel("Date")
plt.ylabel("Normalized Price (Start = 100)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

print("Final values on the last available date:")
print(mini_index.tail(1))

"""Now we will analyze the peak and trough matching of these two indeces."""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks

custom_index = mini_index["CustomIndex"]
nbi_index = mini_index["NBI"]

peaks_custom, _ = find_peaks(custom_index, distance=20)
troughs_custom, _ = find_peaks(-custom_index, distance=20)

peaks_nbi, _ = find_peaks(nbi_index, distance=20)
troughs_nbi, _ = find_peaks(-nbi_index, distance=20)

peaks_custom_values = custom_index.iloc[peaks_custom]
troughs_custom_values = custom_index.iloc[troughs_custom]
peaks_nbi_values = nbi_index.iloc[peaks_nbi]
troughs_nbi_values = nbi_index.iloc[troughs_nbi]

plt.figure(figsize=(12, 6))

plt.plot(custom_index.index, custom_index, label="5-Stock Index", linewidth=2)
plt.plot(nbi_index.index, nbi_index, label="NBI", linewidth=2, linestyle="--")

plt.scatter(custom_index.index[peaks_custom], peaks_custom_values,
            color="green", label="Custom Index Peaks", zorder=5)
plt.scatter(custom_index.index[troughs_custom], troughs_custom_values,
            color="red", label="Custom Index Troughs", zorder=5)
plt.scatter(nbi_index.index[peaks_nbi], peaks_nbi_values,
            color="blue", label="NBI Peaks", marker="x", zorder=5)
plt.scatter(nbi_index.index[troughs_nbi], troughs_nbi_values,
            color="purple", label="NBI Troughs", marker="x", zorder=5)

plt.title("Peak and Trough Analysis: Custom Index vs. NBI")
plt.xlabel("Date")
plt.ylabel("Normalized Price (Start = 100)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

custom_peaks_df = pd.DataFrame({
    "Date": custom_index.index[peaks_custom],
    "CustomIndex Peak": peaks_custom_values
}).reset_index(drop=True)

custom_troughs_df = pd.DataFrame({
    "Date": custom_index.index[troughs_custom],
    "CustomIndex Trough": troughs_custom_values
}).reset_index(drop=True)

nbi_peaks_df = pd.DataFrame({
    "Date": nbi_index.index[peaks_nbi],
    "NBI Peak": peaks_nbi_values
}).reset_index(drop=True)

nbi_troughs_df = pd.DataFrame({
    "Date": nbi_index.index[troughs_nbi],
    "NBI Trough": troughs_nbi_values
}).reset_index(drop=True)

peaks_comparison = pd.merge(custom_peaks_df, nbi_peaks_df, on="Date", how="outer")
troughs_comparison = pd.merge(custom_troughs_df, nbi_troughs_df, on="Date", how="outer")

print("Peaks Comparison:")
print(peaks_comparison)

print("\nTroughs Comparison:")
print(troughs_comparison)

"""Next, we will use Meta's Prophet for predicting our index's trajectory for the next 90 days."""

!pip install prophet

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from prophet import Prophet

df = mini_index.copy()

df.sort_index(inplace=True)


df_prophet = df[['CustomIndex']].reset_index()
df_prophet.columns = ['ds', 'y']

df_prophet['ds'] = pd.to_datetime(df_prophet['ds'])

print(df_prophet.head())

# initiating prophet model
m = Prophet(
    yearly_seasonality= True,
    weekly_seasonality= True,
    daily_seasonality=False,
    )

m.fit(df_prophet)

future = m.make_future_dataframe(periods=90, freq='D')
forecast = m.predict(future)

fig1 = m.plot(forecast)
plt.title("CustomIndex - 90-Day Forecast (Prophet)")
plt.xlabel("Date")
plt.ylabel("CustomIndex")
plt.show()

"""Now, we will add NBI as a regressor and project another 90 day forecast."""

df = mini_index.copy()

df.sort_index(inplace=True)

df_prophet = df[['NBI', 'CustomIndex']].reset_index()
df_prophet.columns = ['ds', 'NBI', 'y']

df_prophet['ds'] = pd.to_datetime(df_prophet['ds'])

print("First few rows of Prophet DataFrame:")
print(df_prophet.head())

m = Prophet(
    yearly_seasonality=True,
    weekly_seasonality=False,
    daily_seasonality=False
)

# external regressor "NBI"
m.add_regressor('NBI')

m.fit(df_prophet)

future_periods = 90
future = m.make_future_dataframe(periods=future_periods, freq='D')

last_nbi = df_prophet['NBI'].iloc[-1]

future = future.merge(df_prophet[['ds','NBI']], on='ds', how='left')
future['NBI'].fillna(last_nbi, inplace=True)

forecast = m.predict(future)
print("\nForecast columns:")
print(forecast.columns)

fig1 = m.plot(forecast)
plt.title("CustomIndex - 90-Day Forecast with NBI as a Regressor")
plt.xlabel("Date")
plt.ylabel("CustomIndex")
plt.show()